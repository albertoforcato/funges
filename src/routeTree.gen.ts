/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsuseRouteImport } from './routes/termsuse'
import { Route as SpeciesRouteImport } from './routes/species'
import { Route as RecipesRouteImport } from './routes/recipes'
import { Route as PrivacyPolicyRouteImport } from './routes/privacy-policy'
import { Route as MapRouteImport } from './routes/map'
import { Route as InstructionsRouteImport } from './routes/instructions'
import { Route as ImpressumRouteImport } from './routes/impressum'
import { Route as IdentifyRouteImport } from './routes/identify'
import { Route as IndexRouteImport } from './routes/index'

const TermsuseRoute = TermsuseRouteImport.update({
  id: '/termsuse',
  path: '/termsuse',
  getParentRoute: () => rootRouteImport,
} as any)
const SpeciesRoute = SpeciesRouteImport.update({
  id: '/species',
  path: '/species',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipesRoute = RecipesRouteImport.update({
  id: '/recipes',
  path: '/recipes',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyPolicyRoute = PrivacyPolicyRouteImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRouteImport,
} as any)
const MapRoute = MapRouteImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => rootRouteImport,
} as any)
const InstructionsRoute = InstructionsRouteImport.update({
  id: '/instructions',
  path: '/instructions',
  getParentRoute: () => rootRouteImport,
} as any)
const ImpressumRoute = ImpressumRouteImport.update({
  id: '/impressum',
  path: '/impressum',
  getParentRoute: () => rootRouteImport,
} as any)
const IdentifyRoute = IdentifyRouteImport.update({
  id: '/identify',
  path: '/identify',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/identify': typeof IdentifyRoute
  '/impressum': typeof ImpressumRoute
  '/instructions': typeof InstructionsRoute
  '/map': typeof MapRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/recipes': typeof RecipesRoute
  '/species': typeof SpeciesRoute
  '/termsuse': typeof TermsuseRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/identify': typeof IdentifyRoute
  '/impressum': typeof ImpressumRoute
  '/instructions': typeof InstructionsRoute
  '/map': typeof MapRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/recipes': typeof RecipesRoute
  '/species': typeof SpeciesRoute
  '/termsuse': typeof TermsuseRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/identify': typeof IdentifyRoute
  '/impressum': typeof ImpressumRoute
  '/instructions': typeof InstructionsRoute
  '/map': typeof MapRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/recipes': typeof RecipesRoute
  '/species': typeof SpeciesRoute
  '/termsuse': typeof TermsuseRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/identify'
    | '/impressum'
    | '/instructions'
    | '/map'
    | '/privacy-policy'
    | '/recipes'
    | '/species'
    | '/termsuse'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/identify'
    | '/impressum'
    | '/instructions'
    | '/map'
    | '/privacy-policy'
    | '/recipes'
    | '/species'
    | '/termsuse'
  id:
    | '__root__'
    | '/'
    | '/identify'
    | '/impressum'
    | '/instructions'
    | '/map'
    | '/privacy-policy'
    | '/recipes'
    | '/species'
    | '/termsuse'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  IdentifyRoute: typeof IdentifyRoute
  ImpressumRoute: typeof ImpressumRoute
  InstructionsRoute: typeof InstructionsRoute
  MapRoute: typeof MapRoute
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  RecipesRoute: typeof RecipesRoute
  SpeciesRoute: typeof SpeciesRoute
  TermsuseRoute: typeof TermsuseRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/termsuse': {
      id: '/termsuse'
      path: '/termsuse'
      fullPath: '/termsuse'
      preLoaderRoute: typeof TermsuseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/species': {
      id: '/species'
      path: '/species'
      fullPath: '/species'
      preLoaderRoute: typeof SpeciesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipes': {
      id: '/recipes'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof RecipesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/map': {
      id: '/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof MapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/instructions': {
      id: '/instructions'
      path: '/instructions'
      fullPath: '/instructions'
      preLoaderRoute: typeof InstructionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/impressum': {
      id: '/impressum'
      path: '/impressum'
      fullPath: '/impressum'
      preLoaderRoute: typeof ImpressumRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/identify': {
      id: '/identify'
      path: '/identify'
      fullPath: '/identify'
      preLoaderRoute: typeof IdentifyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  IdentifyRoute: IdentifyRoute,
  ImpressumRoute: ImpressumRoute,
  InstructionsRoute: InstructionsRoute,
  MapRoute: MapRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  RecipesRoute: RecipesRoute,
  SpeciesRoute: SpeciesRoute,
  TermsuseRoute: TermsuseRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
